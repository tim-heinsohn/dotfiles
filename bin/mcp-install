#!/bin/bash

# MCP Installation Wrapper Script
# Installs MCP servers without cluttering individual MCP installations
# Separates MCP installation from Claude integration

set -euo pipefail

DOTFILES_DIR=${DOTFILES_DIR:-~/dotfiles}

usage() {
    echo "Usage: $0 [install|update|integrate|list] [mcp-name...]"
    echo ""
    echo "Commands:"
    echo "  install <mcp-name>    Install MCP server(s)"
    echo "  update [mcp-name...]  Update MCP server(s) - if no names given, updates all installed"
    echo "  integrate <mcp-name>  Add MCP server(s) to Claude Code"
    echo "  list                  List available MCP servers"
    echo ""
    echo "Available MCP servers:"
    echo "  gmail        Gmail integration with filter management"
    echo "  playwright   Browser automation (already configured)"
    echo "  semgrep      Code security scanning and analysis"
    echo ""
    echo "Examples:"
    echo "  $0 install gmail"
    echo "  $0 update gmail"
    echo "  $0 update            # updates all installed MCPs"
    echo "  $0 integrate gmail"
    echo "  $0 install gmail playwright"
}

install_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi
    
    echo "Installing MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP installed"
}

integrate_mcp() {
    local mcp_name="$1"
    
    case "$mcp_name" in
        gmail)
            if [ -f ~/.gmail-mcp/mcp-config.json ]; then
                echo "Adding Gmail MCP to Claude Code..."
                # Add Gmail MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.gmail-mcp/dist/index.js\"]}"
                claude mcp add-json gmail "$config_json" --scope user
                echo "✓ Gmail MCP integrated with Claude Code"
            else
                echo "Error: Gmail MCP not installed or configured. Run: $0 install gmail"
                return 1
            fi
            ;;
        playwright)
            echo "ℹ Playwright MCP is already configured via system installation"
            ;;
        semgrep)
            if command -v semgrep-mcp &> /dev/null; then
                echo "Adding Semgrep MCP to Claude Code..."
                # Add Semgrep MCP server configuration
                local config_json="{\"command\":\"semgrep-mcp\"}"
                claude mcp add-json semgrep "$config_json" --scope user
                echo "✓ Semgrep MCP integrated with Claude Code"
            else
                echo "Error: Semgrep MCP not installed. Run: $0 install semgrep"
                return 1
            fi
            ;;
        *)
            echo "Error: Integration not implemented for MCP: $mcp_name"
            return 1
            ;;
    esac
}

update_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi
    
    echo "Updating MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP updated"
}

update_all_mcps() {
    echo "Updating all installed MCPs..."
    local updated_count=0
    
    # Check for installed MCPs by their target directories
    if [ -d ~/.gmail-mcp ]; then
        update_mcp gmail
        ((updated_count++))
    fi
    
    if command -v semgrep-mcp &> /dev/null; then
        update_mcp semgrep
        ((updated_count++))
    fi
    
    # Add other MCPs here as they are added
    # if [ -d ~/.some-other-mcp ]; then
    #     update_mcp some-other
    #     ((updated_count++))
    # fi
    
    if [ $updated_count -eq 0 ]; then
        echo "No installed MCPs found to update"
    else
        echo "✓ Updated $updated_count MCP(s)"
    fi
}

list_mcps() {
    echo "Available MCP servers:"
    echo ""
    
    # Find all *-mcp directories
    for mcp_dir in "${DOTFILES_DIR}"/*-mcp; do
        if [ -d "$mcp_dir" ]; then
            mcp_name=$(basename "$mcp_dir" | sed 's/-mcp$//')
            install_script="$mcp_dir/install"
            doc_file="$mcp_dir/doc/usage.md"
            
            status="❌ Not installed"
            if [ -x "$install_script" ]; then
                status="✅ Available"
            fi
            
            description=""
            if [ -f "$doc_file" ]; then
                # Extract first line of description from usage.md
                description=$(head -n 5 "$doc_file" | grep -v "^#" | head -n 1 | sed 's/^[[:space:]]*//')
            fi
            
            printf "  %-12s %s %s\n" "$mcp_name" "$status" "$description"
        fi
    done
    
    echo ""
    echo "Special cases:"
    echo "  playwright   ✅ System-installed (MCP tools available directly)"
}

main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    command="$1"
    shift
    
    case "$command" in
        install)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for installation"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                install_mcp "$mcp_name"
            done
            ;;
        update)
            if [ $# -eq 0 ]; then
                update_all_mcps
            else
                for mcp_name in "$@"; do
                    update_mcp "$mcp_name"
                done
            fi
            ;;
        integrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for integration"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                integrate_mcp "$mcp_name"
            done
            ;;
        list)
            list_mcps
            ;;
        *)
            echo "Error: Unknown command '$command'"
            usage
            exit 1
            ;;
    esac
}

main "$@"
#!/bin/bash

# npm-packages - Install and update global npm packages
# Usage: ./npm-packages [install|update]

set -euo pipefail

# List of global npm packages to manage
declare -a NPM_PACKAGES=(
    "@ansible/ansible-language-server"
    "@anthropic-ai/claude-code"
    "@atlaskit/editor-markdown-transformer"
    "@google/gemini-cli"
    "@microsoft/compose-language-service"
    "@spotlightjs/spotlight"
    "@usebruno/cli"
    "bash-language-server"
    "codebuff"
    "dockerfile-language-server-nodejs"
    "vscode-langservers-extracted"
)

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

check_npm() {
    if ! command -v npm >/dev/null 2>&1; then
        log "ERROR: npm is not installed or not in PATH"
        exit 1
    fi
}

check_nvm_node() {
    # Source nvm if available
    if [ -s "/usr/share/nvm/init-nvm.sh" ]; then
        source /usr/share/nvm/init-nvm.sh
    fi
    
    # Check if node is available
    if ! command -v node >/dev/null 2>&1; then
        log "ERROR: Node.js is not installed or not in PATH"
        log "Make sure to install nvm and set up Node.js first"
        exit 1
    fi
}

install_codex_from_source() {
    local script_path="$HOME/dotfiles/codex/install-from-source"
    if [ -x "$script_path" ]; then
        log ">>> Running patched Codex installer from source..."
        if "$script_path"; then
            log "✓ Successfully installed patched Codex"
        else
            log "✗ Failed to install patched Codex"
        fi
    else
        log "⚠ Patched Codex install script not found or not executable at $script_path"
    fi
}

install_packages() {
    log "Installing global npm packages..."
    
    for package in "${NPM_PACKAGES[@]}"; do
        log "Installing $package..."
        if npm install -g "$package"; then
            log "✓ Successfully installed $package"
        else
            log "✗ Failed to install $package"
        fi
    done
}

update_packages() {
    log "Updating global npm packages..."
    
    for package in "${NPM_PACKAGES[@]}"; do
        log "Updating $package..."
        if npm list -g "$package" >/dev/null 2>&1; then
            if npm update -g "$package"; then
                log "✓ Successfully updated $package"
            else
                log "✗ Failed to update $package"
            fi
        else
            log "⚠ $package not installed, installing..."
            if npm install -g "$package"; then
                log "✓ Successfully installed $package"
            else
                log "✗ Failed to install $package"
            fi
        fi
    done
}

install_or_update_packages() {
    log "Installing/updating global npm packages..."
    
    for package in "${NPM_PACKAGES[@]}"; do
        if npm list -g "$package" >/dev/null 2>&1; then
            log "Updating $package..."
            if npm update -g "$package"; then
                log "✓ Successfully updated $package"
            else
                log "✗ Failed to update $package"
            fi
        else
            log "Installing $package..."
            if npm install -g "$package"; then
                log "✓ Successfully installed $package"
            else
                log "✗ Failed to install $package"
            fi
        fi
    done
}

install_mcp_get_local() {
    local repo="/srv/lib/mcp-get"
    if [ ! -d "$repo" ]; then
        log "mcp-get repo not found at $repo; skipping local setup"
        return 0
    fi
    log "Setting up local mcp-get from $repo"
    pushd "$repo" >/dev/null || { log "Unable to enter $repo"; return 0; }

    # Try to update repository to latest (optional if offline)
    if command -v git >/dev/null 2>&1; then
        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            if git fetch --quiet; then
                if git merge-base --is-ancestor @ @{u} 2>/dev/null; then
                    log "mcp-get repo is up to date"
                else
                    if git pull --ff-only; then
                        log "Pulled latest changes for mcp-get"
                    else
                        log "⚠ git pull failed; continuing with current checkout"
                    fi
                fi
            else
                log "⚠ git fetch failed (likely no network); continuing"
            fi
        fi
    fi

    # Install dependencies (requires network access)
    if npm ci; then
        log "Dependencies installed"
    else
        log "⚠ npm ci failed (likely no network); skipping build"
        popd >/dev/null
        return 0
    fi

    # Build CLI and ensure it is executable
    if npm run -s build; then
        log "mcp-get built successfully"
    else
        log "⚠ mcp-get build failed; skipping link"
        popd >/dev/null
        return 0
    fi

    mkdir -p "$HOME/bin"
    ln -sf "$repo/dist/index.js" "$HOME/bin/mcp-get"
    chmod +x "$repo/dist/index.js" || true
    popd >/dev/null
    log "Linked $HOME/bin/mcp-get -> $repo/dist/index.js"
}

show_usage() {
    echo "Usage: $0 [install|update|auto]"
    echo ""
    echo "Commands:"
    echo "  install  - Install all packages (skip if already installed)"
    echo "  update   - Update existing packages (install if missing)"
    echo "  auto     - Install missing packages, update existing ones (default)"
    echo ""
    echo "Managed packages:"
    for package in "${NPM_PACKAGES[@]}"; do
        echo "  - $package"
    done
    echo "  - @openai/codex (from source)"
}

main() {
    local command="${1:-auto}"
    
    case "$command" in
        install)
            check_npm
            check_nvm_node
            install_packages
            install_codex_from_source
            install_mcp_get_local
            ;;
        update)
            check_npm
            check_nvm_node
            update_packages
            install_codex_from_source
            install_mcp_get_local
            ;;
        auto)
            check_npm
            check_nvm_node
            install_or_update_packages
            install_codex_from_source
            install_mcp_get_local
            ;;
        -h|--help|help)
            show_usage
            exit 0
            ;;
        *)
            log "ERROR: Unknown command '$command'"
            show_usage
            exit 1
            ;;
    esac
    
    log "npm packages management completed"
}

main "$@"

#!/bin/bash

# MCP Installation Wrapper Script
# Installs MCP servers without cluttering individual MCP installations
# Separates MCP installation from Claude integration

set -euo pipefail

DOTFILES_DIR=${DOTFILES_DIR:-~/dotfiles}

usage() {
    echo "Usage: $0 [install|update|integrate|disintegrate|uninstall|list|info] [mcp-name...]"
    echo ""
    echo "Commands:"
    echo "  install <mcp-name>     Install MCP server(s)"
    echo "  update [mcp-name...]   Update MCP server(s) - if no names given, updates all installed"
    echo "  integrate <mcp-name>   Add MCP server(s) to Claude Code"
    echo "  disintegrate <mcp-name> Remove MCP server(s) from Claude Code"
    echo "  uninstall <mcp-name>   Completely remove MCP server(s) and configuration"
    echo "  list                   List available MCP servers"
    echo "  info <mcp-name>        Display usage documentation for MCP server"
    echo ""
    echo "Available MCP servers:"
    echo "  appsignal          AppSignal application monitoring and performance metrics"
    echo "  elevenlabs         Text-to-speech using ElevenLabs API"
    echo "  gitlab             GitLab repository, issues, and merge request management"
    echo "  gmail              Gmail integration with filter management"
    echo "  jira               Jira and Confluence integration"
    echo "  mail-server        IMAP/SMTP email server (project-based primary/secondary accounts)"
    echo "  miro               Miro whiteboard collaboration platform"
    echo "  n8n                n8n workflow automation node documentation"
    echo "  playwright         Browser automation (already configured)"
    echo "  rails-active-mcp   Rails application interaction and database querying"
    echo "  semgrep            Code security scanning and analysis"
    echo "  slack              Slack workspace integration (channels, messages, users)"
    echo "  youtube            YouTube playlist management (watch later, user playlists)"
    echo "  youtube-transcript YouTube video transcript retrieval"
    echo ""
    echo "Examples:"
    echo "  $0 install gmail"
    echo "  $0 update gmail"
    echo "  $0 update            # updates all installed MCPs"
    echo "  $0 integrate gmail"
    echo "  $0 install gmail playwright"
    echo "  $0 info gmail"
}

install_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi
    
    echo "Installing MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP installed"
}

integrate_mcp() {
    local mcp_name="$1"
    
    # Normalize input to handle both patterns
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            mcp_name="rails-active-mcp"
            ;;
        gmail)
            if [ -f ~/.gmail-mcp/mcp-config.json ]; then
                echo "Adding Gmail MCP to Claude Code..."
                # Add Gmail MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.gmail-mcp/dist/index.js\"]}"
                claude mcp add-json gmail "$config_json" --scope user
                echo "✓ Gmail MCP integrated with Claude Code"
            else
                echo "Error: Gmail MCP not installed or configured. Run: $0 install gmail"
                return 1
            fi
            ;;
        miro)
            if [ -d ~/.miro-mcp ]; then
                echo "Adding Miro MCP to Claude Code..."
                # Add Miro MCP server configuration with token
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.miro-mcp/build/index.js\"],\"env\":{\"MIRO_OAUTH_TOKEN\":\"${MIRO_ACCESS_TOKEN:-}\"}}"
                claude mcp add-json miro "$config_json" --scope user
                echo "✓ Miro MCP integrated with Claude Code"
                echo "Note: Make sure MIRO_ACCESS_TOKEN environment variable is set (will be mapped to MIRO_OAUTH_TOKEN)"
            else
                echo "Error: Miro MCP not installed. Run: $0 install miro"
                return 1
            fi
            ;;
        mail-server)
            if [ -f ~/.mail-server-mcp/wrapper-primary ] && [ -f ~/.mail-server-mcp/wrapper-secondary ]; then
                echo "Adding Mail Server MCP to Claude Code..."
                # Add primary mail MCP server configuration
                local primary_config="{\"command\":\"$HOME/.mail-server-mcp/wrapper-primary\"}"
                claude mcp add-json mail-primary "$primary_config" --scope user
                echo "✓ Mail Server Primary MCP integrated with Claude Code"
                
                # Add secondary mail MCP server configuration
                local secondary_config="{\"command\":\"$HOME/.mail-server-mcp/wrapper-secondary\"}"
                claude mcp add-json mail-secondary "$secondary_config" --scope user
                echo "✓ Mail Server Secondary MCP integrated with Claude Code"
                
                echo ""
                echo "Next steps:"
                echo "1. Copy ~/.mail-server-mcp/example-project.envrc to your project directories as .envrc"
                echo "2. Edit each project's .envrc with PRIMARY_MAIL_* and SECONDARY_MAIL_* variables"
                echo "3. Run 'direnv allow' in each project directory"
                echo "4. Use 'mail-primary' and 'mail-secondary' MCP servers from any project"
            else
                echo "Error: Mail Server MCP not installed. Run: $0 install mail-server"
                return 1
            fi
            ;;
        playwright)
            echo "ℹ Playwright MCP is already configured via system installation"
            ;;
        youtube-transcript)
            echo "Adding YouTube Transcript MCP to Claude Code..."
            # Add YouTube Transcript MCP server configuration
            local config_json="{\"command\":\"npx\",\"args\":[\"-y\",\"@sinco-lab/mcp-youtube-transcript\"]}"
            claude mcp add-json youtube-transcript "$config_json" --scope user
            echo "✓ YouTube Transcript MCP integrated with Claude Code"
            ;;
        youtube)
            if [ -d ~/.youtube-mcp ]; then
                echo "Adding YouTube Playlist MCP to Claude Code..."
                # Add YouTube MCP server configuration for playlist management
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.youtube-mcp/youtube-mcp-server/dist/index.js\"]}"
                claude mcp add-json youtube "$config_json" --scope user
                echo "✓ YouTube Playlist MCP integrated with Claude Code"
            else
                echo "Error: YouTube MCP not installed. Run: $0 install youtube"
                return 1
            fi
            ;;
        jira)
            if [ -f ~/.jira-mcp/bin/mcp-server ]; then
                echo "Adding Jira MCP to Claude Code..."
                # Add Jira MCP server configuration for Python-based server
                local config_json="{\"command\":\"$HOME/.jira-mcp/bin/mcp-server\",\"env\":{}}"
                claude mcp add-json jira "$config_json" --scope user
                echo "✓ Jira MCP integrated with Claude Code"
                echo "Note: Set JIRA_API_TOKEN, JIRA_EMAIL, and JIRA_URL environment variables"
            else
                echo "Error: Jira MCP not installed. Run: $0 install jira"
                return 1
            fi
            ;;
        n8n)
            if [ -d ~/.n8n-mcp ]; then
                echo "Adding n8n MCP to Claude Code..."
                # Add n8n MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.n8n-mcp/build/index.js\"]}"
                claude mcp add-json n8n "$config_json" --scope user
                echo "✓ n8n MCP integrated with Claude Code"
            else
                echo "Error: n8n MCP not installed. Run: $0 install n8n"
                return 1
            fi
            ;;
        semgrep)
            if command -v semgrep-mcp &> /dev/null; then
                echo "Adding Semgrep MCP to Claude Code..."
                # Add Semgrep MCP server configuration
                local config_json="{\"command\":\"semgrep-mcp\"}"
                claude mcp add-json semgrep "$config_json" --scope user
                echo "✓ Semgrep MCP integrated with Claude Code"
            else
                echo "Error: Semgrep MCP not installed. Run: $0 install semgrep"
                return 1
            fi
            ;;
        elevenlabs)
            if [ -d ~/.elevenlabs-mcp ]; then
                echo "Adding ElevenLabs MCP to Claude Code..."
                # Add ElevenLabs MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.elevenlabs-mcp/elevenlabs-mcp/dist/index.js\"],\"env\":{\"ELEVENLABS_API_KEY\":\"${ELEVENLABS_API_KEY:-}\"}}"
                claude mcp add-json elevenlabs "$config_json" --scope user
                echo "✓ ElevenLabs MCP integrated with Claude Code"
            else
                echo "Error: ElevenLabs MCP not installed. Run: $0 install elevenlabs"
                return 1
            fi
            ;;
        appsignal)
            if [ -d ~/.appsignal-mcp ]; then
                echo "Adding AppSignal MCP to Claude Code..."
                # Add AppSignal MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.appsignal-mcp/dist/index.js\"],\"env\":{\"APPSIGNAL_PUSH_API_KEY\":\"${APPSIGNAL_PUSH_API_KEY:-}\"}}"
                claude mcp add-json appsignal "$config_json" --scope user
                echo "✓ AppSignal MCP integrated with Claude Code"
                echo "Note: Make sure APPSIGNAL_PUSH_API_KEY environment variable is set"
            else
                echo "Error: AppSignal MCP not installed. Run: $0 install appsignal"
                return 1
            fi
            ;;
        gitlab)
            if [ -d ~/.gitlab-mcp ]; then
                echo "Adding GitLab MCP to Claude Code..."
                # Add GitLab MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.gitlab-mcp/dist/index.js\"],\"env\":{\"GITLAB_PERSONAL_ACCESS_TOKEN\":\"${GITLAB_PERSONAL_ACCESS_TOKEN:-}\",\"GITLAB_URL\":\"${GITLAB_URL:-https://gitlab.com}\"}}"
                claude mcp add-json gitlab "$config_json" --scope user
                echo "✓ GitLab MCP integrated with Claude Code"
                echo "Note: Set GITLAB_PERSONAL_ACCESS_TOKEN and optionally GITLAB_URL environment variables"
            else
                echo "Error: GitLab MCP not installed. Run: $0 install gitlab"
                return 1
            fi
            ;;
        rails-active|rails-active-mcp)
            echo "Rails Active MCP requires integration with your Rails application, not Claude Code directly"
            echo ""
            echo "To use Rails Active MCP:"
            echo "1. Run: $0 install rails-active-mcp"
            echo "2. Add gem 'rails-active-mcp' to your Rails app's Gemfile"
            echo "3. Run: bundle install"
            echo "4. Run: rails generate rails_active_mcp:install"
            echo "5. Configure security settings in config/initializers/rails_active_mcp.rb"
            echo "6. Start your Rails server - MCP will be available at /mcp"
            echo ""
            echo "See: $DOTFILES_DIR/rails-active-mcp/doc/usage.md for security configuration"
            ;;
        slack)
            if [ -d ~/.slack-mcp ]; then
                echo "Adding Slack MCP to Claude Code..."
                # Add Slack MCP server configuration
                local config_json="{\"command\":\"node\",\"args\":[\"$HOME/.slack-mcp/src/slack/dist/index.js\"],\"env\":{\"SLACK_BOT_TOKEN\":\"${SLACK_BOT_TOKEN:-}\",\"SLACK_SIGNING_SECRET\":\"${SLACK_SIGNING_SECRET:-}\"}}"
                claude mcp add-json slack "$config_json" --scope user
                echo "✓ Slack MCP integrated with Claude Code"
                echo "Note: Set SLACK_BOT_TOKEN and SLACK_SIGNING_SECRET environment variables"
            else
                echo "Error: Slack MCP not installed. Run: $0 install slack"
                return 1
            fi
            ;;
        *)
            echo "Error: Integration not implemented for MCP: $mcp_name"
            return 1
            ;;
    esac
}

update_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi
    
    echo "Updating MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP updated"
}

update_all_mcps() {
    echo "Updating all installed MCPs..."
    local updated_count=0
    
    # Check for installed MCPs by their target directories
    if [ -d ~/.elevenlabs-mcp ]; then
        update_mcp elevenlabs
        ((updated_count++))
    fi
    
    if [ -d ~/.gmail-mcp ]; then
        update_mcp gmail
        ((updated_count++))
    fi
    
    if [ -d ~/.jira-mcp ]; then
        update_mcp jira
        ((updated_count++))
    fi
    
    if [ -d ~/.mail-server-mcp ]; then
        update_mcp mail-server
        ((updated_count++))
    fi
    
    if [ -d ~/.miro-mcp ]; then
        update_mcp miro
        ((updated_count++))
    fi
    
    if [ -d ~/.n8n-mcp ]; then
        update_mcp n8n
        ((updated_count++))
    fi
    
    if [ -d ~/.youtube-mcp ]; then
        update_mcp youtube
        ((updated_count++))
    fi
    
    if command -v semgrep-mcp &> /dev/null; then
        update_mcp semgrep
        ((updated_count++))
    fi
    
    if [ -d ~/.rails-active-mcp ]; then
        echo "Rails Active MCP is a gem - update with: gem update rails-active-mcp"
        ((updated_count++))
    fi
    
    if [ -d ~/.appsignal-mcp ]; then
        update_mcp appsignal
        ((updated_count++))
    fi
    
    if [ -d ~/.gitlab-mcp ]; then
        update_mcp gitlab
        ((updated_count++))
    fi
    
    if [ -d ~/.slack-mcp ]; then
        update_mcp slack
        ((updated_count++))
    fi

    # Add other MCPs here as they are added
    # if [ -d ~/.some-other-mcp ]; then
    #     update_mcp some-other
    #     updated_count=$((updated_count + 1))
    # fi
    
    if [ $updated_count -eq 0 ]; then
        echo "No installed MCPs found to update"
    else
        echo "Updated $updated_count MCPs"
    fi
}

list_mcps() {
    echo "Available MCP servers:"
    echo ""
    
    # Check actual MCP installation status
    declare -A mcp_checks=(
        ["elevenlabs"]="[ -f ~/.elevenlabs-mcp/elevenlabs-mcp/dist/index.js ]"
        ["gmail"]="[ -f ~/.gmail-mcp/dist/index.js ]"
        ["gitlab"]="[ -f ~/.gitlab-mcp/dist/index.js ]"
        ["jira"]="[ -f ~/.jira-mcp/bin/mcp-server ]"
        ["miro"]="[ -f ~/.miro-mcp/build/index.js ]"
        ["n8n"]="[ -f ~/.n8n-mcp/build/index.js ]"
        ["semgrep"]="command -v semgrep-mcp > /dev/null 2>&1"
        ["slack"]="[ -f ~/.slack-mcp/src/slack/dist/index.js ]"
        ["rails-active-mcp"]="[ -f ~/.rails-active-mcp/rails-active-mcp-*.gem ]"
    )
    
    for mcp_name in "${!mcp_checks[@]}"; do
        mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
        install_script="$mcp_dir/install"
        doc_file="$mcp_dir/doc/usage.md"
        
        # Check actual installation
        if eval "${mcp_checks[$mcp_name]}"; then
            status="✅ Ready"
        elif [ -x "$install_script" ]; then
            status="📦 Available"
        else
            status="❌ Not available"
        fi
        
        description=""
        if [ -f "$doc_file" ]; then
            description=$(head -n 5 "$doc_file" | grep -v "^#" | head -n 1 | sed 's/^[[:space:]]*//')
        fi
        
        printf "  %-12s %s %s\n" "$mcp_name" "$status" "$description"
    done
    
    echo ""
    echo "Special cases:"
    echo "  playwright   ✅ System-installed (MCP tools available directly)"
}

disintegrate_mcp() {
    local mcp_name="$1"
    
    # Normalize input to handle both patterns
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            echo "Rails Active MCP cannot be disintegrated from Claude Code - it's integrated with Rails apps directly"
            return 0
            ;;
        mail-server)
            echo "Removing Mail Server MCP from Claude Code..."
            claude mcp remove mail-primary --scope user 2>/dev/null || echo "mail-primary not found in Claude"
            claude mcp remove mail-secondary --scope user 2>/dev/null || echo "mail-secondary not found in Claude"
            echo "✓ Mail Server MCP removed from Claude Code"
            ;;
        *)
            echo "Removing $mcp_name MCP from Claude Code..."
            claude mcp remove "$mcp_name" --scope user 2>/dev/null || echo "$mcp_name not found in Claude"
            echo "✓ $mcp_name MCP removed from Claude Code"
            ;;
    esac
}

uninstall_mcp() {
    local mcp_name="$1"
    
    echo "Completely uninstalling $mcp_name MCP..."
    
    # First remove from Claude
    disintegrate_mcp "$mcp_name"
    
    # Then remove installation directories
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            echo "Rails Active MCP is a gem - uninstall with: gem uninstall rails-active-mcp"
            return 0
            ;;
        semgrep)
            if command -v semgrep-mcp &> /dev/null; then
                echo "Removing semgrep-mcp command..."
                pip3 uninstall -y semgrep-mcp 2>/dev/null || uv pip uninstall semgrep-mcp 2>/dev/null || npm uninstall -g @semgrep/mcp 2>/dev/null || true
                echo "✓ semgrep-mcp command removed"
            fi
            ;;
        gmail)
            rm -rf ~/.gmail-mcp
            echo "✓ Gmail MCP directory removed"
            ;;
        miro)
            rm -rf ~/.miro-mcp
            echo "✓ Miro MCP directory removed"
            ;;
        mail-server)
            rm -rf ~/.mail-server-mcp
            echo "✓ Mail Server MCP directory removed"
            ;;
        youtube-transcript)
            # No persistent installation directory for npx-based
            echo "✓ YouTube Transcript MCP (npx-based) - no persistent files to remove"
            ;;
        youtube)
            rm -rf ~/.youtube-mcp
            echo "✓ YouTube Playlist MCP directory removed"
            ;;
        jira)
            rm -rf ~/.jira-mcp
            echo "✓ Jira MCP directory removed"
            ;;
        n8n)
            rm -rf ~/.n8n-mcp
            echo "✓ n8n MCP directory removed"
            ;;
        elevenlabs)
            rm -rf ~/.elevenlabs-mcp
            echo "✓ ElevenLabs MCP directory removed"
            ;;
        appsignal)
            rm -rf ~/.appsignal-mcp
            echo "✓ AppSignal MCP directory removed"
            ;;
        gitlab)
            rm -rf ~/.gitlab-mcp
            echo "✓ GitLab MCP directory removed"
            ;;
        slack)
            rm -rf ~/.slack-mcp
            echo "✓ Slack MCP directory removed"
            ;;
        playwright)
            echo "Playwright MCP is system-installed - use: npm uninstall -g @playwright/mcp"
            return 0
            ;;
        *)
            echo "Error: Uninstall not implemented for MCP: $mcp_name"
            return 1
            ;;
    esac
    
    echo "✓ $mcp_name MCP completely uninstalled"
}

show_mcp_info() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    local doc_file="$mcp_dir/doc/usage.md"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -f "$doc_file" ]; then
        echo "Error: Usage documentation not found: $doc_file"
        return 1
    fi
    
    # Use glow with pager if available, otherwise bat with pager, otherwise less
    if command -v glow >/dev/null 2>&1; then
        glow -p "$doc_file"
    elif command -v bat >/dev/null 2>&1; then
        bat --paging=always "$doc_file"
    else
        less "$doc_file"
    fi
}

main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    command="$1"
    shift
    
    case "$command" in
        install)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for installation"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                install_mcp "$mcp_name"
            done
            ;;
        update)
            if [ $# -eq 0 ]; then
                update_all_mcps
            else
                for mcp_name in "$@"; do
                    update_mcp "$mcp_name"
                done
            fi
            ;;
        integrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for integration"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                integrate_mcp "$mcp_name"
            done
            ;;
        list)
            list_mcps
            ;;
        disintegrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for disintegration"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                disintegrate_mcp "$mcp_name"
            done
            ;;
        uninstall)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for uninstallation"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                uninstall_mcp "$mcp_name"
            done
            ;;
        info)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for info"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                show_mcp_info "$mcp_name"
            done
            ;;
        *)
            echo "Error: Unknown command '$command'"
            usage
            exit 1
            ;;
    esac
}

main "$@"

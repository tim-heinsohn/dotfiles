#!/bin/bash

# MCP Installation Wrapper Script
# Installs MCP servers without cluttering individual MCP installations
# Separates MCP installation from Claude integration

set -euo pipefail

DOTFILES_DIR=${DOTFILES_DIR:-~/dotfiles}

# Detect mcp-get in PATH
HAS_MCP_GET=0
if command -v mcp-get >/dev/null 2>&1; then
    HAS_MCP_GET=1
fi

run_mcp_get() {
    # Invoke mcp-get from PATH with optional timeout to avoid hangs
    local _timeout="${MCP_GET_TIMEOUT:-15}"
    local cmd=(mcp-get "$@")
    if command -v timeout >/dev/null 2>&1; then
        timeout "${_timeout}" "${cmd[@]}"
    else
        "${cmd[@]}"
    fi
}

# Resolve the local registry directory from an installed mcp-get
resolve_mcpget_packages_dir() {
    local bin_path
    bin_path=$(command -v mcp-get 2>/dev/null) || return 1
    bin_path=$(readlink -f "$bin_path" 2>/dev/null || echo "$bin_path")
    local dist_dir=$(dirname "$bin_path")
    local root_dir=$(dirname "$dist_dir")
    local candidate="$root_dir/packages"
# Detect Goose installations
HAS_GOOSE_DESKTOP=0
HAS_GOOSE_CLI=0
command -v goose-desktop >/dev/null 2>&1 && HAS_GOOSE_DESKTOP=1
command -v goose >/dev/null 2>&1 && HAS_GOOSE_CLI=1

    if [ -d "$candidate" ]; then
        echo "$candidate"
        return 0
    fi
    return 1
}

# Offline search by scanning registry JSON files
search_offline_registry() {
    local query="$*"
    local dir
    if ! dir=$(resolve_mcpget_packages_dir); then
        return 1
    fi
    # Grep matching files (case-insensitive)
    local files
    files=$(grep -ril -- "$query" "$dir"/*.json 2>/dev/null || true)
    if [ -z "$files" ]; then
        return 1
    fi
    while IFS= read -r f; do
        [ -n "$f" ] || continue
        local name desc
        name=$(sed -n 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' "$f" | head -n1)
        desc=$(sed -n 's/.*"description"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' "$f" | head -n1)
        if [ -n "$name" ]; then
            printf "  %-24s %s\n" "$name" "$desc"
        fi
    done <<< "$files"
    return 0
}

usage() {
    echo "Usage: $0 [install|update|integrate|disintegrate|uninstall|list|info|prompt|search] [mcp-name...]"
    echo ""
    echo "Commands:"
    echo "  install <mcp-name>     Install MCP server(s)"
    echo "  update [mcp-name...]   Update MCP server(s) - if no names given, updates all installed"
    echo "  integrate <mcp-name>   Add MCP server(s) to Claude Code"
    echo "  disintegrate <mcp-name> Remove MCP server(s) from Claude Code"
    echo "  uninstall <mcp-name>   Completely remove MCP server(s) and configuration"
    echo "  list                   List available MCP servers"
    echo "  info <mcp-name>        Display usage documentation for MCP server"
    echo "  prompt <mcp-name>      Show Claude prompt documentation for MCP server"
    echo "  search <query>         Search registry via mcp-get"
    echo ""
    echo "Available MCP servers:"
    echo "  appsignal          AppSignal application monitoring and performance metrics"
    echo "  context7           Intelligent context management for documentation and code examples"
    echo "  elevenlabs         Text-to-speech using ElevenLabs API"
    echo "  gmail              Gmail integration with filter management"
    echo "  gitlab             GitLab repository, issues, and merge request management"
    echo "  jira               Jira and Confluence integration"
    echo "  mail-server        IMAP/SMTP email server (project-based primary/secondary accounts)"
    echo "  n8n                n8n workflow automation node documentation"
    echo "  playwright         Browser automation (already configured)"
    echo "  rails-active-mcp   Rails application interaction and database querying"
    echo "  semgrep            Code security scanning and analysis"
    echo "  sequential         Multi-step problem solving and systematic analysis"
    echo "  serena             Semantic code analysis and intelligent editing"
    echo "  slack              Slack workspace integration (channels, messages, users)"
    echo "  youtube-playlist   YouTube playlist management (watch later, user playlists)"
    echo "  youtube-transcript YouTube video transcript retrieval"
    echo ""
    echo "Examples:"
    echo "  $0 install gmail"
    echo "  $0 update gmail"
    echo "  $0 update            # updates all installed MCPs"
    echo "  $0 integrate gmail"
    echo "  $0 install gmail playwright"
    echo "  $0 info gmail"
}

install_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"


    # Curated-first: use repo install script when present
    if [ -d "$mcp_dir" ] && [ -x "$mcp_dir/install" ]; then
        echo "Installing MCP: $mcp_name"
        "$mcp_dir/install"
        echo "✓ $mcp_name MCP installed"
        return 0
    fi

    # Fallback: try mcp-get if available
    if [ "$HAS_MCP_GET" -eq 1 ]; then
        echo "Installing MCP via mcp-get: $mcp_name"
        if run_mcp_get install "$mcp_name"; then
            echo "✓ $mcp_name MCP installed via mcp-get"
            return 0
        else
            echo "Error: mcp-get failed to install '$mcp_name'" >&2
            return 1
        fi
    fi

    echo "Error: MCP '$mcp_name' not found in $mcp_dir and mcp-get not available" >&2
    return 1
}

integrate_mcp() {
    local mcp_name="$1"
    # Normalize common aliases
    case "$mcp_name" in
      rails-active|rails-active-mcp) mcp_name="rails-active-mcp" ;;
      *) : ;;
    esac
    # Special case: playwright is system-installed and already configured
    if [ "$mcp_name" = "playwright" ]; then
      echo "ℹ Playwright MCP is already configured via system installation"
      return 0
    fi

    local script="${DOTFILES_DIR}/${mcp_name}-mcp/integrate"
    if [ -x "$script" ]; then
      "$script"
      return 0
    fi

    # Fallback: guide integration using mcp-get
    if [ "$HAS_MCP_GET" -eq 1 ]; then
      echo "ℹ No curated integrate script for '$mcp_name'." >&2
      echo "If not installed yet, run: mcp-get install $mcp_name" >&2
      echo "Then add to Claude once you know its start command:" >&2
      echo "  claude mcp add $mcp_name -- <command> [args...]" >&2
      echo "Optionally mirror to Codex via: $DOTFILES_DIR/bin/codex-mcp upsert $mcp_name <<EOF ... EOF" >&2
      return 1
    fi

    echo "Error: Integration script not found for '$mcp_name' at $script" >&2
    echo "Make sure the MCP exists and provides an 'integrate' script." >&2
    return 1
}

update_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"

    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi

    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi

    echo "Updating MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP updated"
}

update_all_mcps() {
    echo "Updating all installed MCPs..."
    local updated_count=0

    # Check for installed MCPs by their target directories
    if [ -d ~/.elevenlabs-mcp ]; then
        update_mcp elevenlabs
        ((updated_count++))
    fi

    if [ -d ~/.gmail-mcp ]; then
        update_mcp gmail
        ((updated_count++))
    fi

    if [ -d ~/.jira-mcp ]; then
        update_mcp jira
        ((updated_count++))
    fi

    if [ -d ~/.mail-server-mcp ]; then
        update_mcp mail-server
        ((updated_count++))
    fi

    if [ -d ~/.miro-mcp ]; then
        update_mcp miro
        ((updated_count++))
    fi

    if [ -d ~/.n8n-mcp ]; then
        update_mcp n8n
        ((updated_count++))
    fi

    if [ -d ~/.youtube-playlist-mcp ] && [ -f ~/.youtube-playlist-mcp/dist/index.js ]; then
        update_mcp youtube-playlist
        ((updated_count++))
    fi

    if command -v semgrep-mcp &> /dev/null; then
        update_mcp semgrep
        ((updated_count++))
    fi

    if [ -d ~/.rails-active-mcp ]; then
        echo "Rails Active MCP is a gem - update with: gem update rails-active-mcp"
        ((updated_count++))
    fi

    if [ -d ~/.appsignal-mcp ]; then
        update_mcp appsignal
        ((updated_count++))
    fi

    if [ -d ~/.gitlab-mcp ]; then
        update_mcp gitlab
        ((updated_count++))
    fi

    if [ -d ~/.slack-mcp ]; then
        update_mcp slack
        ((updated_count++))
    fi

    if [ -d ~/.context7-mcp ]; then
        update_mcp context7
        ((updated_count++))
    fi

    if [ -d ~/.sequential-mcp ]; then
        update_mcp sequential
        ((updated_count++))
    fi

    if [ -d ~/.serena-mcp ]; then
        update_mcp serena
        ((updated_count++))
    fi

    # Add other MCPs here as they are added (alphabetical order)
    # if [ -d ~/.some-other-mcp ]; then
    #     update_mcp some-other
    #     ((updated_count++))
    # fi

    if [ $updated_count -eq 0 ]; then
        echo "No installed MCPs found to update"
    else
        echo "Updated $updated_count MCPs"
    fi
}

list_mcps() {
    echo "MCPs:"
    echo ""
    # Will render a borderless table; uses 'column' when available

    # Define MCPs in alphabetical order
    mcps_raw=("appsignal" "context7" "memory" "elevenlabs" "gmail" "gitlab" "jira" "mail-server" "n8n" "rails-active-mcp" "semgrep" "serena" "sequential" "slack" "youtube-playlist" "youtube-transcript")

    # Concise tags per MCP (used for Description column)
    declare -A mcp_tags=(
        ["memory"]="memory"
        ["appsignal"]="apm, metrics"
        ["context7"]="context, docs, code"
        ["elevenlabs"]="tts"
        ["gmail"]="gmail, filters"
        ["gitlab"]="repos, issues, mrs"
        ["jira"]="jira, confluence"
        ["mail-server"]="imap, smtp"
        ["n8n"]="workflows"
        ["rails-active-mcp"]="rails, db"
        ["semgrep"]="security, scan"
        ["serena"]="code, edit"
        ["sequential"]="planning"
        ["slack"]="slack, chat"
        ["youtube-playlist"]="playlists"
        ["youtube-transcript"]="transcripts"
    )

    # Gather current integrations
    # Gather current integrations
    local claude_mcps codex_mcps codex_file
    claude_mcps=$(claude mcp list 2>/dev/null || true)
    codex_mcps=""
    # Prefer ~/.codex/config.toml (managed by codex-mcp), fall back to ~/.codex/mcp.toml
    for f in "$HOME/.codex/config.toml" "$HOME/.codex/mcp.toml"; do

        if [ -f "$f" ]; then codex_file="$f"; break; fi
    done
    if [ -n "${codex_file:-}" ]; then
        if command -v yq >/dev/null 2>&1; then
            if yq -e -p toml '.mcp.servers' "$codex_file" >/dev/null 2>&1; then
                codex_mcps=$(yq -p toml '.mcp.servers | keys | .[]' "$codex_file" | tr '\n' ' ')
            fi
        else
            # Fallback parser: extract names from [mcp.servers.<name>(.subtable)?]
            codex_mcps=$(grep -E '^\[mcp\.servers\.[^]]+\]' "$codex_file" \
              | sed -E 's/^\[mcp\.servers\.([^.\]]*).*$/\1/' \
              | sort -u | tr '\n' ' ')
        fi
    fi

    # Check actual MCP installation status
    declare -A mcp_checks=(
        ["appsignal"]="command -v docker > /dev/null 2>&1"
        ["context7"]="[ -f ~/.context7-mcp/dist/index.js ]"
        ["elevenlabs"]="[ -f ~/.elevenlabs-mcp/elevenlabs-mcp/dist/index.js ]"
        ["gmail"]="[ -f ~/.gmail-mcp/dist/index.js ]"
        ["gitlab"]="[ -f ~/.gitlab-mcp/dist/index.js ]"
        ["jira"]="[ -f ~/.jira-mcp/bin/mcp-server ]"
        ["mail-server"]="[ -f ~/.mail-server-mcp/wrapper-primary ] && [ -f ~/.mail-server-mcp/wrapper-secondary ]"
        ["memory"]="( command -v goose-desktop >/dev/null 2>&1 || command -v goose >/dev/null 2>&1 || [ -x ~/.local/bin/goose-mcp-memory ] )"
        ["n8n"]="[ -f ~/.n8n-mcp/build/index.js ]"
        ["rails-active-mcp"]="[ -f ~/.rails-active-mcp/rails-active-mcp-*.gem ]"
        ["sequential"]="[ -f ~/.sequential-mcp/dist/index.js ]"
        ["semgrep"]="command -v semgrep-mcp > /dev/null 2>&1"
        ["serena"]="[ -f ~/.serena-mcp/dist/index.js ]"
        ["slack"]="[ -f ~/.slack-mcp/src/slack/dist/index.js ]"
        ["youtube-playlist"]="[ -f ~/.youtube-playlist-mcp/dist/index.js ]"
        ["youtube-transcript"]="command -v npx > /dev/null 2>&1"
    )

    # Start table with header
    # Sort alphabetically
    IFS=$'\n' mcps=($(printf "%s\n" "${mcps_raw[@]}" | sort))
    unset IFS
    local table_lines
    table_lines="MCP|Installed|Claude|Codex|Goose|Description\n"

    for mcp_name in "${mcps[@]}"; do
        mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
        install_script="$mcp_dir/install"
        doc_file="$mcp_dir/doc/usage.md"

        # Check actual installation
        installed_flag=0
        check_cmd="${mcp_checks[$mcp_name]:-false}"
        if eval "$check_cmd"; then
            installed_flag=1
        elif [ -x "$install_script" ]; then
            : # available but not installed
        else
            : # not available
        fi

        # Prefer concise tags; fallback to doc summary
        description="${mcp_tags[$mcp_name]:-}"
        if [ -z "$description" ] && [ -f "$doc_file" ]; then
            description=$(head -n 5 "$doc_file" | grep -v "^#" | head -n 1 | sed 's/^[[:space:]]*//')
        fi
        # Default integrations to not enabled
        local claude_icon codex_icon goose_icon installed_icon
        claude_icon="—"; codex_icon="—"; goose_icon="—"
        installed_icon="—"

        if [ "$installed_flag" -eq 1 ]; then
            installed_icon="x"

        # Claude: mark enabled if appears in claude mcp list output
        if echo "$claude_mcps" | grep -qw "$mcp_name"; then
            claude_icon="x"
        else
            # Special case: mail-server aggregates two entries
            if [ "$mcp_name" = "mail-server" ] && (echo "$claude_mcps" | grep -qw "mail-primary" || echo "$claude_mcps" | grep -qw "mail-secondary"); then
                claude_icon="x"
            fi
        fi

        # Codex: mark enabled if key exists in ~/.codex/mcp.toml

            # Goose: mark enabled via ~/.config/goose/config.yaml
            goose_icon_tmp="—"
            cfg_yaml="${XDG_CONFIG_HOME:-$HOME/.config}/goose/config.yaml"
            if [ -f "$cfg_yaml" ]; then
              if command -v yq >/dev/null 2>&1; then
                if yq -e '.extensions | has("'"$mcp_name"'")' "$cfg_yaml" >/dev/null 2>&1; then goose_icon_tmp="x"; fi
                if [ "$mcp_name" = "mail-server" ] && yq -e '.extensions | (has("mail-primary") or has("mail-secondary"))' "$cfg_yaml" >/dev/null 2>&1; then goose_icon_tmp="x"; fi
              else
                block=$(sed -n '/^extensions:/,/^[^[:space:]]/p' "$cfg_yaml")
                if printf '%s
' "$block" | grep -Eq '^[[:space:]]+'"$mcp_name"':'; then goose_icon_tmp="x"; fi
                if [ "$mcp_name" = "mail-server" ] && printf '%s
' "$block" | grep -Eq '^[[:space:]]*(mail-primary|mail-secondary):'; then goose_icon_tmp="x"; fi
              fi
            fi
            # Built-in Memory extension shows when Goose exists
            if [ "$mcp_name" = "memory" ] && ( command -v goose-desktop >/dev/null 2>&1 || command -v goose >/dev/null 2>&1 ); then
              goose_icon_tmp="x"
            fi
            if [ "$goose_icon_tmp" = "x" ]; then goose_icon="x"; fi

            if [ -n "$codex_mcps" ]; then
            if echo " $codex_mcps " | grep -q " $mcp_name "; then
                codex_icon="x"
            else
                if [ "$mcp_name" = "mail-server" ] && (echo " $codex_mcps " | grep -q " mail-primary \| mail-secondary "); then
                    codex_icon="x"
                fi
            fi
        fi
    fi

    table_lines+="${mcp_name}|${installed_icon}|${claude_icon}|${codex_icon}|${goose_icon}|${description}\n"
    done

    if command -v column >/dev/null 2>&1; then
        printf "%b" "$table_lines" | column -t -s '|' | sed 's/^/  /'
    else
        # Fallback alignment if column is unavailable
        printf "  %-18s %-13s %-8s %-8s %-8s %s\n" \
            "MCP" "Installed" "Claude" "Codex" "Goose" "Description"
        while IFS='|' read -r c1 c2 c3 c4 c5 c6; do
            [ "$c1" = "MCP" ] && continue
            printf "  %-18s %-13s %-8s %-8s %-8s %s\n" "$c1" "$c2" "$c3" "$c4" "$c5" "$c6"
        done <<< "$table_lines"
    fi

    echo ""
    echo "Special cases:"
    printf "  %-18s %s\n" "playwright" "x System-installed (MCP tools available directly)"
    printf "  %-18s %s\n" "appsignal" "Docker-based; treated installed if Docker present"
}

disintegrate_mcp() {
    local mcp_name="$1"

    # Normalize input to handle both patterns
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            echo "Rails Active MCP cannot be disintegrated from Claude Code - it's integrated with Rails apps directly"
            return 0
            ;;
        mail-server)
            echo "Removing Mail Server MCP from Claude Code..."
            claude mcp remove mail-primary --scope user 2>/dev/null || echo "mail-primary not found in Claude"
            claude mcp remove mail-secondary --scope user 2>/dev/null || echo "mail-secondary not found in Claude"
            echo "✓ Mail Server MCP removed from Claude Code"
            # Remove from Codex
            "$DOTFILES_DIR/bin/codex-mcp" remove mail-primary || true
            "$DOTFILES_DIR/bin/codex-mcp" remove mail-secondary || true
            ;;
        *)
            echo "Removing $mcp_name MCP from Claude Code..."
            claude mcp remove "$mcp_name" --scope user 2>/dev/null || echo "$mcp_name not found in Claude"
            echo "✓ $mcp_name MCP removed from Claude Code"
            # Remove from Codex
            "$DOTFILES_DIR/bin/codex-mcp" remove "$mcp_name" || true
            ;;
    esac
}

uninstall_mcp() {
    local mcp_name="$1"

    echo "Completely uninstalling $mcp_name MCP..."

    # First remove from Claude
    disintegrate_mcp "$mcp_name"

    # Then remove installation directories
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            echo "Rails Active MCP is a gem - uninstall with: gem uninstall rails-active-mcp"
            return 0
            ;;
        semgrep)
            if command -v semgrep-mcp &> /dev/null; then
                echo "Removing semgrep-mcp command..."
                pip3 uninstall -y semgrep-mcp 2>/dev/null || uv pip uninstall semgrep-mcp 2>/dev/null || npm uninstall -g @semgrep/mcp 2>/dev/null || true
                echo "✓ semgrep-mcp command removed"
            fi
            ;;
        gmail)
            rm -rf ~/.gmail-mcp
            echo "✓ Gmail MCP directory removed"
            ;;
        miro)
            rm -rf ~/.miro-mcp
            echo "✓ Miro MCP directory removed"
            ;;
        mail-server)
            rm -rf ~/.mail-server-mcp
            echo "✓ Mail Server MCP directory removed"
            ;;
        youtube-transcript)
            # No persistent installation directory for npx-based
            echo "✓ YouTube Transcript MCP (npx-based) - no persistent files to remove"
            ;;
        youtube-playlist)
            rm -rf ~/.youtube-playlist-mcp
            echo "✓ YouTube Playlist MCP directory removed"
            ;;
        jira)
            rm -rf ~/.jira-mcp
            echo "✓ Jira MCP directory removed"
            ;;
        n8n)
            rm -rf ~/.n8n-mcp
            echo "✓ n8n MCP directory removed"
            ;;
        elevenlabs)
            rm -rf ~/.elevenlabs-mcp
            echo "✓ ElevenLabs MCP directory removed"
            ;;
        appsignal)
            rm -rf ~/.appsignal-mcp
            echo "✓ AppSignal MCP directory removed"
            ;;
        context7)
            rm -rf ~/.context7-mcp
            echo "✓ Context7 MCP directory removed"
            ;;
        sequential)
            rm -rf ~/.sequential-mcp
            echo "✓ Sequential MCP directory removed"
            ;;
        serena)
            rm -rf ~/.serena-mcp
            echo "✓ Serena MCP directory removed"
            ;;
        gitlab)
            rm -rf ~/.gitlab-mcp
            echo "✓ GitLab MCP directory removed"
            ;;
        slack)
            rm -rf ~/.slack-mcp
            echo "✓ Slack MCP directory removed"
            ;;
        playwright)
            echo "Playwright MCP is system-installed - use: npm uninstall -g @playwright/mcp"
            return 0
            ;;
        *)
            echo "Error: Uninstall not implemented for MCP: $mcp_name"
            return 1
            ;;
    esac

    echo "✓ $mcp_name MCP completely uninstalled"
}

show_mcp_info() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    local doc_file="$mcp_dir/doc/usage.md"

    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi

    if [ ! -f "$doc_file" ]; then
        echo "Error: Usage documentation not found: $doc_file"
        return 1
    fi

    # Use glow with pager if available, otherwise bat with pager, otherwise less
    if command -v glow >/dev/null 2>&1; then
        glow -p "$doc_file"
    elif command -v bat >/dev/null 2>&1; then
        bat --paging=always "$doc_file"
    else
        less "$doc_file"
    fi
}

show_mcp_prompt() {
    local mcp_name="$1"
    local prompt_file="$HOME/.claude/docs/tools/${mcp_name}-mcp.md"

    if [ ! -f "$prompt_file" ]; then
        echo "Error: Claude prompt documentation not found: $prompt_file"
        return 1
    fi

    # Use glow with pager if available, otherwise bat with pager, otherwise less
    if command -v glow >/dev/null 2>&1; then
        glow -p "$prompt_file"
    elif command -v bat >/dev/null 2>&1; then
        bat --paging=always "$prompt_file"
    else
        less "$prompt_file"
    fi
}

main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi

    command="$1"
    shift

    case "$command" in
        install)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for installation"
                usage
                exit 1
            fi

            for mcp_name in "$@"; do
                install_mcp "$mcp_name"
            done
            ;;
        update)
            if [ $# -eq 0 ]; then
                update_all_mcps
            else
                for mcp_name in "$@"; do
                    update_mcp "$mcp_name"
                done
            fi
            ;;
        integrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for integration"
                usage
                exit 1
            fi

            for mcp_name in "$@"; do
                integrate_mcp "$mcp_name"
            done
            ;;
        list)
            list_mcps
            ;;
        disintegrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for disintegration"
                usage
                exit 1
            fi

            for mcp_name in "$@"; do
                disintegrate_mcp "$mcp_name"
            done
            ;;
        uninstall)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for uninstallation"
                usage
                exit 1
            fi

            for mcp_name in "$@"; do
                uninstall_mcp "$mcp_name"
            done
            ;;
        info)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for info"
                usage
                exit 1
            fi

            for mcp_name in "$@"; do
                show_mcp_info "$mcp_name"
            done
            ;;
        prompt)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for prompt"
                usage
                exit 1
            fi

            for mcp_name in "$@"; do
                show_mcp_prompt "$mcp_name"
            done
            ;;
        search)
            if [ $# -eq 0 ]; then
                echo "Error: No search query provided"
                usage
                exit 1
            fi
            query="$*"
            # Offline registry scan first; then curated fallback
            if search_offline_registry "$query"; then
                :
            else
                list_mcps | grep -i -- "$query" || true
            fi
            ;;

        *)
            echo "Error: Unknown command '$command'"
            usage
            exit 1
            ;;
    esac
}

main "$@"

#!/bin/bash

# MCP Installation Wrapper Script
# Installs MCP servers without cluttering individual MCP installations
# Separates MCP installation from Claude integration

set -euo pipefail

DOTFILES_DIR=${DOTFILES_DIR:-~/dotfiles}

usage() {
    echo "Usage: $0 [install|update|integrate|disintegrate|uninstall|list|info|prompt] [mcp-name...]"
    echo ""
    echo "Commands:"
    echo "  install <mcp-name>     Install MCP server(s)"
    echo "  update [mcp-name...]   Update MCP server(s) - if no names given, updates all installed"
    echo "  integrate <mcp-name>   Add MCP server(s) to Claude Code"
    echo "  disintegrate <mcp-name> Remove MCP server(s) from Claude Code"
    echo "  uninstall <mcp-name>   Completely remove MCP server(s) and configuration"
    echo "  list                   List available MCP servers"
    echo "  info <mcp-name>        Display usage documentation for MCP server"
    echo "  prompt <mcp-name>      Show Claude prompt documentation for MCP server"
    echo ""
    echo "Available MCP servers:"
    echo "  appsignal          AppSignal application monitoring and performance metrics"
    echo "  context7           Intelligent context management for documentation and code examples"
    echo "  elevenlabs         Text-to-speech using ElevenLabs API"
    echo "  gmail              Gmail integration with filter management"
    echo "  gitlab             GitLab repository, issues, and merge request management"
    echo "  jira               Jira and Confluence integration"
    echo "  mail-server        IMAP/SMTP email server (project-based primary/secondary accounts)"
    echo "  n8n                n8n workflow automation node documentation"
    echo "  playwright         Browser automation (already configured)"
    echo "  rails-active-mcp   Rails application interaction and database querying"
    echo "  semgrep            Code security scanning and analysis"
    echo "  slack              Slack workspace integration (channels, messages, users)"
    echo "  youtube-playlist   YouTube playlist management (watch later, user playlists)"
    echo "  youtube-transcript YouTube video transcript retrieval"
    echo ""
    echo "Examples:"
    echo "  $0 install gmail"
    echo "  $0 update gmail"
    echo "  $0 update            # updates all installed MCPs"
    echo "  $0 integrate gmail"
    echo "  $0 install gmail playwright"
    echo "  $0 info gmail"
}

install_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi
    
    echo "Installing MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP installed"
}

integrate_mcp() {
    local mcp_name="$1"
    # Normalize common aliases
    case "$mcp_name" in
      rails-active|rails-active-mcp) mcp_name="rails-active-mcp" ;;
      *) : ;;
    esac

    # Special case: playwright is system-installed and already configured
    if [ "$mcp_name" = "playwright" ]; then
      echo "ℹ Playwright MCP is already configured via system installation"
      return 0
    fi

    local script="${DOTFILES_DIR}/${mcp_name}-mcp/integrate"
    if [ -x "$script" ]; then
      "$script"
    else
      echo "Error: Integration script not found for '$mcp_name' at $script" >&2
      echo "Make sure the MCP exists and provides an 'integrate' script." >&2
      return 1
    fi
}

update_mcp() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -x "$mcp_dir/install" ]; then
        echo "Error: Install script not found or not executable: $mcp_dir/install"
        return 1
    fi
    
    echo "Updating MCP: $mcp_name"
    "$mcp_dir/install"
    echo "✓ $mcp_name MCP updated"
}

update_all_mcps() {
    echo "Updating all installed MCPs..."
    local updated_count=0
    
    # Check for installed MCPs by their target directories
    if [ -d ~/.elevenlabs-mcp ]; then
        update_mcp elevenlabs
        ((updated_count++))
    fi
    
    if [ -d ~/.gmail-mcp ]; then
        update_mcp gmail
        ((updated_count++))
    fi
    
    if [ -d ~/.jira-mcp ]; then
        update_mcp jira
        ((updated_count++))
    fi
    
    if [ -d ~/.mail-server-mcp ]; then
        update_mcp mail-server
        ((updated_count++))
    fi
    
    if [ -d ~/.miro-mcp ]; then
        update_mcp miro
        ((updated_count++))
    fi
    
    if [ -d ~/.n8n-mcp ]; then
        update_mcp n8n
        ((updated_count++))
    fi
    
    if [ -d ~/.youtube-playlist-mcp ] && [ -f ~/.youtube-playlist-mcp/dist/index.js ]; then
        update_mcp youtube-playlist
        ((updated_count++))
    fi
    
    if command -v semgrep-mcp &> /dev/null; then
        update_mcp semgrep
        ((updated_count++))
    fi
    
    if [ -d ~/.rails-active-mcp ]; then
        echo "Rails Active MCP is a gem - update with: gem update rails-active-mcp"
        ((updated_count++))
    fi
    
    if [ -d ~/.appsignal-mcp ]; then
        update_mcp appsignal
        ((updated_count++))
    fi
    
    if [ -d ~/.gitlab-mcp ]; then
        update_mcp gitlab
        ((updated_count++))
    fi
    
    if [ -d ~/.slack-mcp ]; then
        update_mcp slack
        ((updated_count++))
    fi

    if [ -d ~/.context7-mcp ]; then
        update_mcp context7
        ((updated_count++))
    fi
    
    # Add other MCPs here as they are added (alphabetical order)
    # if [ -d ~/.some-other-mcp ]; then
    #     update_mcp some-other
    #     ((updated_count++))
    # fi
    
    if [ $updated_count -eq 0 ]; then
        echo "No installed MCPs found to update"
    else
        echo "Updated $updated_count MCPs"
    fi
}

list_mcps() {
    echo "Available MCP servers:"
    echo ""
    
    # Define MCPs in alphabetical order
    mcps=("appsignal" "context7" "elevenlabs" "gmail" "gitlab" "jira" "mail-server" "n8n" "rails-active-mcp" "semgrep" "slack" "youtube-playlist" "youtube-transcript")
    
    # Check actual MCP installation status
    declare -A mcp_checks=(
        ["appsignal"]="[ -d ~/.appsignal-mcp ] && [ -f ~/.appsignal-mcp/dist/index.js ]"
        ["context7"]="[ -f ~/.context7-mcp/dist/index.js ]"
        ["elevenlabs"]="[ -f ~/.elevenlabs-mcp/elevenlabs-mcp/dist/index.js ]"
        ["gmail"]="[ -f ~/.gmail-mcp/dist/index.js ]"
        ["gitlab"]="[ -f ~/.gitlab-mcp/dist/index.js ]"
        ["jira"]="[ -f ~/.jira-mcp/bin/mcp-server ]"
        ["mail-server"]="[ -f ~/.mail-server-mcp/wrapper-primary ] && [ -f ~/.mail-server-mcp/wrapper-secondary ]"
        ["n8n"]="[ -f ~/.n8n-mcp/build/index.js ]"
        ["rails-active-mcp"]="[ -f ~/.rails-active-mcp/rails-active-mcp-*.gem ]"
        ["semgrep"]="command -v semgrep-mcp > /dev/null 2>&1"
        ["slack"]="[ -f ~/.slack-mcp/src/slack/dist/index.js ]"
        ["youtube-playlist"]="[ -f ~/.youtube-playlist-mcp/dist/index.js ]"
        ["youtube-transcript"]="command -v npx > /dev/null 2>&1"
    )
    
    for mcp_name in "${mcps[@]}"; do
        mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
        install_script="$mcp_dir/install"
        doc_file="$mcp_dir/doc/usage.md"
        
        # Check actual installation
        if eval "${mcp_checks[$mcp_name]}"; then
            status="✅ Ready"
        elif [ -x "$install_script" ]; then
            status="ℹ Available"
        else
            status="❌ Not available"
        fi
        
        description=""
        if [ -f "$doc_file" ]; then
            description=$(head -n 5 "$doc_file" | grep -v "^#" | head -n 1 | sed 's/^[[:space:]]*//')
        fi
        
        printf "  %-18s %s %s\n" "$mcp_name" "$status" "$description"
    done
    
    echo ""
    echo "Special cases:"
    printf "  %-18s %s\n" "playwright" "✅ System-installed (MCP tools available directly)"
}

disintegrate_mcp() {
    local mcp_name="$1"
    
    # Normalize input to handle both patterns
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            echo "Rails Active MCP cannot be disintegrated from Claude Code - it's integrated with Rails apps directly"
            return 0
            ;;
        mail-server)
            echo "Removing Mail Server MCP from Claude Code..."
            claude mcp remove mail-primary --scope user 2>/dev/null || echo "mail-primary not found in Claude"
            claude mcp remove mail-secondary --scope user 2>/dev/null || echo "mail-secondary not found in Claude"
            echo "✓ Mail Server MCP removed from Claude Code"
            # Remove from Codex
            "$DOTFILES_DIR/bin/codex-mcp" remove mail-primary || true
            "$DOTFILES_DIR/bin/codex-mcp" remove mail-secondary || true
            ;;
        *)
            echo "Removing $mcp_name MCP from Claude Code..."
            claude mcp remove "$mcp_name" --scope user 2>/dev/null || echo "$mcp_name not found in Claude"
            echo "✓ $mcp_name MCP removed from Claude Code"
            # Remove from Codex
            "$DOTFILES_DIR/bin/codex-mcp" remove "$mcp_name" || true
            ;;
    esac
}

uninstall_mcp() {
    local mcp_name="$1"
    
    echo "Completely uninstalling $mcp_name MCP..."
    
    # First remove from Claude
    disintegrate_mcp "$mcp_name"
    
    # Then remove installation directories
    case "$mcp_name" in
        rails-active|rails-active-mcp)
            echo "Rails Active MCP is a gem - uninstall with: gem uninstall rails-active-mcp"
            return 0
            ;;
        semgrep)
            if command -v semgrep-mcp &> /dev/null; then
                echo "Removing semgrep-mcp command..."
                pip3 uninstall -y semgrep-mcp 2>/dev/null || uv pip uninstall semgrep-mcp 2>/dev/null || npm uninstall -g @semgrep/mcp 2>/dev/null || true
                echo "✓ semgrep-mcp command removed"
            fi
            ;;
        gmail)
            rm -rf ~/.gmail-mcp
            echo "✓ Gmail MCP directory removed"
            ;;
        miro)
            rm -rf ~/.miro-mcp
            echo "✓ Miro MCP directory removed"
            ;;
        mail-server)
            rm -rf ~/.mail-server-mcp
            echo "✓ Mail Server MCP directory removed"
            ;;
        youtube-transcript)
            # No persistent installation directory for npx-based
            echo "✓ YouTube Transcript MCP (npx-based) - no persistent files to remove"
            ;;
        youtube-playlist)
            rm -rf ~/.youtube-playlist-mcp
            echo "✓ YouTube Playlist MCP directory removed"
            ;;
        jira)
            rm -rf ~/.jira-mcp
            echo "✓ Jira MCP directory removed"
            ;;
        n8n)
            rm -rf ~/.n8n-mcp
            echo "✓ n8n MCP directory removed"
            ;;
        elevenlabs)
            rm -rf ~/.elevenlabs-mcp
            echo "✓ ElevenLabs MCP directory removed"
            ;;
        appsignal)
            rm -rf ~/.appsignal-mcp
            echo "✓ AppSignal MCP directory removed"
            ;;
        context7)
            rm -rf ~/.context7-mcp
            echo "✓ Context7 MCP directory removed"
            ;;
        gitlab)
            rm -rf ~/.gitlab-mcp
            echo "✓ GitLab MCP directory removed"
            ;;
        slack)
            rm -rf ~/.slack-mcp
            echo "✓ Slack MCP directory removed"
            ;;
        playwright)
            echo "Playwright MCP is system-installed - use: npm uninstall -g @playwright/mcp"
            return 0
            ;;
        *)
            echo "Error: Uninstall not implemented for MCP: $mcp_name"
            return 1
            ;;
    esac
    
    echo "✓ $mcp_name MCP completely uninstalled"
}

show_mcp_info() {
    local mcp_name="$1"
    local mcp_dir="${DOTFILES_DIR}/${mcp_name}-mcp"
    local doc_file="$mcp_dir/doc/usage.md"
    
    if [ ! -d "$mcp_dir" ]; then
        echo "Error: MCP '$mcp_name' not found in $mcp_dir"
        return 1
    fi
    
    if [ ! -f "$doc_file" ]; then
        echo "Error: Usage documentation not found: $doc_file"
        return 1
    fi
    
    # Use glow with pager if available, otherwise bat with pager, otherwise less
    if command -v glow >/dev/null 2>&1; then
        glow -p "$doc_file"
    elif command -v bat >/dev/null 2>&1; then
        bat --paging=always "$doc_file"
    else
        less "$doc_file"
    fi
}

show_mcp_prompt() {
    local mcp_name="$1"
    local prompt_file="$HOME/.claude/docs/tools/${mcp_name}-mcp.md"
    
    if [ ! -f "$prompt_file" ]; then
        echo "Error: Claude prompt documentation not found: $prompt_file"
        return 1
    fi
    
    # Use glow with pager if available, otherwise bat with pager, otherwise less
    if command -v glow >/dev/null 2>&1; then
        glow -p "$prompt_file"
    elif command -v bat >/dev/null 2>&1; then
        bat --paging=always "$prompt_file"
    else
        less "$prompt_file"
    fi
}

main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    command="$1"
    shift
    
    case "$command" in
        install)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for installation"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                install_mcp "$mcp_name"
            done
            ;;
        update)
            if [ $# -eq 0 ]; then
                update_all_mcps
            else
                for mcp_name in "$@"; do
                    update_mcp "$mcp_name"
                done
            fi
            ;;
        integrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for integration"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                integrate_mcp "$mcp_name"
            done
            ;;
        list)
            list_mcps
            ;;
        disintegrate)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for disintegration"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                disintegrate_mcp "$mcp_name"
            done
            ;;
        uninstall)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for uninstallation"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                uninstall_mcp "$mcp_name"
            done
            ;;
        info)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for info"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                show_mcp_info "$mcp_name"
            done
            ;;
        prompt)
            if [ $# -eq 0 ]; then
                echo "Error: No MCP names specified for prompt"
                usage
                exit 1
            fi
            
            for mcp_name in "$@"; do
                show_mcp_prompt "$mcp_name"
            done
            ;;
        *)
            echo "Error: Unknown command '$command'"
            usage
            exit 1
            ;;
    esac
}

main "$@"

"(( GENERAL

" This setting can be useful for determining how many lines of text you want
" to
" yank. It will display the line number column, but lines will be the distance
" from the current line.
set relativenumber

" Additionally, indicate current line number instead of 0.
set number

set autochdir                          " always switch to the current file directory
set nocompatible                       " don't imitate vi bugs and limitiations
set exrc                               " read .vimrc within every directory
set secure
set novisualbell                       " don't flash
"))

" ))
" (( INCLUDES
runtime! config/*.vim
runtime! config/plugin/*.vim
" ))
" (( UI
set cursorcolumn                       " highlight the current column – disturbs autocompletetion background!
set cursorline                         " highlight current line
"set guioptions-=T                      " no toolbar (for gvim)
set laststatus=2                       " always show the status line with file name
set report=0                           " tell us when anything is changed via :...
set ruler                              " show statusline with cursor position
set mouse=a                            " use mouse everywhere – prevents GNOME Ctrl+C clipboard copy, use register + instead: `" +p` / ` " +y`
set mousehide                          " hide the mouse cursor when typing
set scrolloff=10                       " Keep 10 lines (top/bottom) for scope
set shortmess=aOstTI                   " shortens messages to avoid
set showcmd                            " show the command being typed
set sidescrolloff=10                   " Keep 5 lines at the size
" ))
" (( EDITING
set autoindent                         " use current line for next line's indent level (for pasting from GNOME see :help paste or use " +)
set expandtab                          " create spaces instead of tabs, use ^V^I for real tabs
set iskeyword+=_,$,@,%,#               " none of these are word dividers
autocmd FileType ruby set iskeyword-=:
autocmd FileType yaml set iskeyword-=:
set list                               " display tabs as symbols, don't indent
set listchars=tab:>-,trail:_           " indent tabs displayed as symbols
set nostartofline                      " remain cursor at postion when scrolling with page up / down
set shiftwidth=2                       " amount of characters to be represented by tabs
set showmatch                          " briefly show corresponding brace, parenthese, bracket
set smartindent                        " guess indention level (badly indents C-Shift-V inserts)
set softtabstop=2                      " makes the spaces feel like real tabs
set tabstop=2                          " tab width
set noeol                              " prevent writing newline to last line of file
set ff=unix                            " unix linebreaks as default

" ))
" (( SEARCH
set hls                                " highlight search results (or not)
nmap <silent> <leader>h :nohls<CR>     " turn off last search's highlighting
set incsearch                          " search by typing (incremental search)
set ignorecase                         " case insensitive matching
set smartcase                          " smart case matching
set wildignore+=.git,.svn,*.bak,*.jpg,*.gif,*.png,*.pdf
set wildmenu                           " don't take first cli match (files, commands), let choose / incremental
set wildmode=list:longest,full         " multiple matches: list all, complete longest, wildmenu with 2nd tab
" ))
" (( COLORS
"set t_Co=256
"set background=dark
"colo lucius
"set background=light
" colo solarized
" colo jellybeans
" colo pyte
" required to run solarized in terminal:
"let g:solarized_termcolors=256
" ))
" (( FOLDING
" save folds of a file (created with `zf`)
" requires existing ~/.vim/view/ directory
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview
" ))
" (( SYNTAX
" (( Filetype and syntax highlighting
filetype on        " detect filetypes
filetype plugin on " guess filetypes
syn on             " syntax highlighting on
" ))
" (( MARKS
" jump to last position when reopening file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif
" ))
" ))
" (( POST WRITES
" read .vimrc
" :autocmd BufWritePost ~/.vimrc   so ~/.vimrc
" ))
" (( RELOAD BUFFER WHEN CHANGED FROM OUTSIDE
" https://unix.stackexchange.com/a/383044
set autoread
au CursorHold,CursorHoldI * checktime
" ))
" (( VIM SESSION + INFO (GLOBAL)
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
" ))
" (( GOPASS
au BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile
" ))
" (( GUIOPTIONS (gvim)
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=e
    set guioptions-=c
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=b
    set guioptions-=B
    set lines=53
    set columns=143
    " color pyte

    " settings for vim-indent-guides
    set ts=4 sw=4 et
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
endif
" ))
" (( GIT
" TODO: find a better place
" @see <https://github.com/itchyny/lightline.vim/issues/293#issuecomment-373710096>
function! GitFileName()
  let root = fnamemodify(get(b:, 'gitbranch_path'), ':h:h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction
" ))
" ))
" vim: fdm=marker foldmarker=((,)) fdl=0 sts=2 ai

"(( GENERAL

" Set local mapleader
let mapleader = "_"

" This setting can be useful for determining how many lines of text you want
" to
" yank. It will display the line number column, but lines will be the distance
" from the current line.
set relativenumber

" Additionally, indicate current line number instead of 0.
set number

" a nice shortcut for ppl with french keyboard layout who don't write french
" often; use `r` (replace) to type it nonetheless
map! ç <Esc>

set autochdir                          " always switch to the current file directory
set nocompatible                       " don't imitate vi bugs and limitiations
set exrc                               " read .vimrc within every directory
set secure
set novisualbell                       " don't flash
"))
" (( PLUGINS
" (( Vundle
"---------------------------------------------------------------
" Vundle init
filetype off | set rtp+=~/.vim/bundle/Vundle.vim | call vundle#begin()
"Plugin 'gmarik/vundle'
" ==> git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vim.vundle <==
Plugin 'VundleVim/Vundle.vim'
"---------------------------------------------------------------
" Definitions:
" - Github: user/repo
" - vim-scripts.org: repo
" no comments allowed in bundle lines!
"
" Commands:
" :BundleList                          - list configured bundles
" :BundleInstall                       - install(update) bundles
" :BundleSearch foo                    - search(or refresh cache first) for foo
" :BundleClean                         - confirm(or auto-approve) removal of unused bundles
"
" Versions:
" <https://github.com/gmarik/vundle/issues/35>
" for specifying plugin versions / branches "---------------------------------------------------------------
" ))
" (( Status

" Vim Powerline
" → <$HOME/.vim/bundle/vim-powerline/README.rst>
Plugin 'Lokaltog/vim-powerline'
let g:Powerline_stl_path_style = 'full'

Plugin 'dannyob/quickfixstatus'
" ))
" (( Files, Buffer

" fzf
" → <$HOME/.vim/bundle/fzf.vim/README.md>
set rtp+=~/.fzf "fuzzy file finder <https://github.com/justinmk/fzf>
Plugin 'junegunn/fzf.vim'
let g:fzf_command_prefix = 'Fz'
exec "nmap <silent> <leader>b :FzBuffers<CR>"

" <Leader>f to run ranger within Vim
Plugin 'francoiscabrol/ranger.vim'
" vs. https://github.com/Mizuchi/vim-ranger ?

" requires ctags package (use Universal Ctags)
" Vundle: `:PluginDocs` to generate `:h gutentags` files
Plugin 'ludovicchabant/vim-gutentags'

Plugin 'majutsushi/tagbar'

" ))
" (( Git
" committa.vim
" (see git status and diff when editing a commit message)
" → <$HOME/.vim/bundle/committia.vim/README.md>
Plugin 'rhysd/committia.vim'
" ))
" (( All Languages

Plugin 'tpope/vim-commentary'

Plugin 'godlygeek/tabular'

Plugin 'scrooloose/syntastic'

Plugin 'metakirby5/codi.vim'

" ))
" (( Markdown

Plugin 'plasticboy/vim-markdown'

"Plugin 'itchyny/vim-highlighturl'

" ))
" (( Taskjuggler

Plugin 'kalafut/vim-taskjuggler'

" ))
" (( UML

Plugin 'aklt/plantuml-syntax'

" ))
" (( Javascript + JSON

Plugin 'vim-json-bundle'

" ))
" (( Ruby/Rails
Plugin 'danchoi/ri.vim'
Plugin 'ruby-formatter/rufo-vim'

" ))
" (( PHP

Plugin 'stephpy/vim-php-cs-fixer'

Plugin 'tqmz/php-doc.vim'

Plugin 'StanAngeloff/php.vim'

" ))
" (( Twig

Plugin 'beyondwords/vim-twig'

" ))
" (( Other
Plugin 'jbmorgado/vim-pine-script'
Plugin 'Fymyte/rasi.vim' " for rofi configuration


" ))
" (( Slides / Presentations
Plugin 'sotte/presenting.vim'
" ))
" (( Colors
Plugin 'CSApprox'
Plugin 'Colour-Sampler-Pack'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/Vim-Tomorrow-Theme'
Plugin 'reedes/vim-colors-pencil'
Plugin 'veloce/vim-aldmeris'
Plugin 'zaki/zazen'
Plugin 'zenesque.vim'
" ))
call vundle#end()

filetype plugin indent on " for Vundle, may be commented out
filetype on

" ))
" (( INCLUDES
runtime! config/*.vim
runtime! config/plugin/*.vim
" ))
" (( UI
set cursorcolumn                       " highlight the current column – disturbs autocompletetion background!
set cursorline                         " highlight current line
set guioptions-=T                      " no toolbar (for gvim)
set laststatus=2                       " always show the status line with file name
set report=0                           " tell us when anything is changed via :...
set ruler                              " show statusline with cursor position
set mouse=a                            " use mouse everywhere – prevents GNOME Ctrl+C clipboard copy, use register + instead: `" +p` / ` " +y`
set mousehide                          " hide the mouse cursor when typing
set scrolloff=10                       " Keep 10 lines (top/bottom) for scope
set shortmess=aOstTI                   " shortens messages to avoid
set showcmd                            " show the command being typed
set sidescrolloff=10                   " Keep 5 lines at the size
" ))
" (( EDITING
set autoindent                         " use current line for next line's indent level (for pasting from GNOME see :help paste or use " +)
set expandtab                          " create spaces instead of tabs, use ^V^I for real tabs
set iskeyword+=_,$,@,%,#               " none of these are word dividers
set list                               " display tabs as symbols, don't indent
set listchars=tab:>-,trail:_           " indent tabs displayed as symbols
set nostartofline                      " remain cursor at postion when scrolling with page up / down
set shiftwidth=4                       " amount of characters to be represented by tabs
set showmatch                          " briefly show corresponding brace, parenthese, bracket
set smartindent                        " guess indention level (badly indents C-Shift-V inserts)
set softtabstop=4                      " makes the spaces feel like real tabs
set tabstop=4                          " tab width
" ))
" (( SEARCH
set hls                                " highlight search results (or not)
nmap <silent> <leader>h :nohls<CR>     " turn off last search's highlighting
set incsearch                          " search by typing (incremental search)
set ignorecase                         " case insensitive matching
set smartcase                          " smart case matching
set wildignore+=.git,.svn,*.bak,*.jpg,*.gif,*.png,*.pdf
set wildmenu                           " don't take first cli match (files, commands), let choose / incremental
set wildmode=list:longest,full         " multiple matches: list all, complete longest, wildmenu with 2nd tab
" ))
" (( COLORS
set t_Co=256
"set background=dark
"colo lucius
set background=light
" colo solarized
" colo jellybeans
colo pyte
" required to run solarized in terminal:
let g:solarized_termcolors=256
" ))
" (( FOLDING
" save folds of a file (created with `zf`)
" requires existing ~/.vim/view/ directory
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview
" ))
" (( SYNTAX
" (( Filetype and syntax highlighting
filetype on        " detect filetypes
filetype plugin on " guess filetypes
syn on             " syntax highlighting on
" ))
" (( Syntastic
" :help syntastic-options
let g:syntastic_check_on_open=1
let g:syntastic_echo_current_error=1
let g:syntastic_enable_signs=1
let g:syntastic_enable_balloons = 0
let g:syntastic_enable_highlighting = 1
let g:syntastic_auto_jump=0
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=10
let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': ['javascript', 'json', 'php', 'rst', 'yaml', 'css', 'sh'],
                           \ 'passive_filetypes': ['lua', 'ruby', 'python', 'xml', 'xslt', 'html', 'haml' ] }
" let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_javascript_checker = "jshint"
" ))
" (( MARKS
" jump to last position when reopening file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif
" ))
" ))
" (( PROJECT      http://www.linupedia.org/opensuse/Vim_Plugins
nmap <silent> <F2> <Plug>ToggleProject
let g:proj_window_width = 50
let g:proj_flags        = "ibmnstgT"
" ))
" (( KEY MAPPINGS MARKDOWN + VARIOUS FILE TYPE COMMANDS
":autocmd FileType markdown nmap <C-M> :w!<CR>:!pandoc -s -f markdown -t html --template $PANDOC_THEMES_DIR/pandoc-uikit/standalone.html --toc --toc-depth=3 % -o %.html<CR>
:autocmd FileType markdown set nospell

" YML
:autocmd FileType yml set expandtab
:autocmd FileType yml set shiftwidth=2
:autocmd FileType yml set softtabstop=2
:autocmd FileType yml set tabstop=2
" ))
" (( KEY MAPPINGS MAIL EDITING + QUOTING
" replaces empty quoted lines and sets markdown file type
" which is nice for quotations and common text highlighting
" use `gq` and a movement command (or `V` before) to fix a
" quoted block
" set tw=75 or the text width you like from your mail client
" in Evolution, configure the external editor plugin like this:
"     gvim -f -c 'set fo=tcrq' -c 'set tw=76'
noremap <F12> :%s/\(> \)\+$//g<CR>
" ))
" (( KEY MAPPINGS GENERAL
" shortcuts for replacing tabs / removing trailing whitespace
nmap <silent> <LocalLeader>ct :%s/\t/    /g<CR>:%s/\s\+$//g<CR>
nmap <silent> <LocalLeader>cs :%s/\s\+$//g<CR>
" shortcut for inserting date or timestamp
nmap <silent> <leader>id :put = strftime('%b %d, %Y')<CR>
nmap <silent> <leader>it :put = strftime('%c')<CR>
" ))
" (( POST WRITES
" read .vimrc
" :autocmd BufWritePost ~/.vimrc   so ~/.vimrc
" ))
" (( RELOAD BUFFER WHEN CHANGED FROM OUTSIDE
" https://unix.stackexchange.com/a/383044
set autoread
au CursorHold,CursorHoldI * checktime
" ))
" (( OPEN FILE UNDER CURSOR AS IMAGE
:nnoremap gO :!feh <cfile> &<CR>
" ))
" (( WINDOWS SMART MOVE KEY COMBINATIONS
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>
" ))
" (( XML + HTML
let g:sparkupExecuteMapping = '<C-e>'   " Mapping used to execute sparkup.
let g:sparkupNextMapping    = '<C-E>'   " Mapping used to jump to the next empty tag/attribute.
" ))
" (( VIM SESSION + INFO (GLOBAL)
" Save session and viminfo, quit
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
nmap <silent> <F10> :mksession! /home/t/.vim/.vimsession<CR>:wviminfo! /home/t/.vim/.viminfo<CR>:qa!<CR>
" reload buffers ... and history of commands, searches, ... with <F9>
" see `:help user-manual`, chapter 21.3
nmap <silent> <F9> :source /home/t/.vim/.vimsession<CR>:set viminfo=%,'50,<1000,s100,:50,@10,/50,n/home/t/.vim/.viminfo<CR>
" ))
" (( UNDOFILE
" <http://vi.stackexchange.com/a/53>
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0700)
endif
if !isdirectory($HOME."/.vim-undo-dir")
    call mkdir($HOME."/.vim-undo-dir", "", 0700)
endif
set undodir=~/.vim-undo-dir
set undofile
" ))
" (( GOPASS
au BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile
" ))
" (( GUIOPTIONS (gvim)
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=e
    set guioptions-=c
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=b
    set guioptions-=B
    set lines=53
    set columns=143
    color pyte

    " settings for vim-indent-guides
    set ts=4 sw=4 et
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
endif

" ))
" (( NERDTree
" Map NERDTreeToggle to convenient key
nmap <leader>n :NERDTreeToggle<cr>
" ))
" vim: fdm=marker foldmarker=((,)) fdl=0 sts=2 ai

#!/bin/sh
# A robust wrapper for i3status to add the hostname and project code.

# Start i3status and pipe its output for processing
i3status | (
    # Read and print the first two lines (header and opening bracket)
    read -r line && echo "$line"
    read -r line && echo "$line"

    # Source project codes within subshell so variables are available here
    PROJECTS_FILE="$HOME/.projects"
    if [ -f "$PROJECTS_FILE" ]; then
        # shellcheck disable=SC1090
        . "$PROJECTS_FILE"
    fi

    # Process each JSON array from i3status in a loop
    while read -r line; do
        # The line from i3status is a JSON array, sometimes with a leading comma.
        # Store the comma and remove it for processing.
        if echo "$line" | grep -q '^,'; then
            line_to_process=$(echo "$line" | cut -c 2-)
            leading_comma=","
        else
            line_to_process=$line
            leading_comma=""
        fi

        # Determine active project code
        if [ -f /tmp/project_secondary_on ]; then
            proj_code="${SECONDARY_PROJECT_CODE}"
        else
            proj_code="${PRIMARY_PROJECT_CODE}"
        fi
        [ -n "$proj_code" ] || proj_code="PRJ"

        # Prepare injected segments: hostname and project code
        with_hostname=$(echo "$line_to_process" | jq --arg host "$(hostnamectl hostname)" '[{ "full_text": $host, "name": "hostname" }] + .')
        with_project=$(echo "$with_hostname" | jq --arg proj "$proj_code" '[{ "full_text": $proj, "name": "project" }] + .')

        # Add a red CAPS indicator when Caps Lock is active.
        caps_state=$(xset -q 2>/dev/null | awk '/Caps Lock:/ {print $4; exit}' | tr '[:upper:]' '[:lower:]')
        with_caps="$with_project"
        if [ "${caps_state:-off}" = "on" ]; then
            with_caps=$(echo "$with_project" | jq --arg text "CAPS" --arg color "#FF3B30" '[{ "full_text": $text, "name": "caps_lock", "color": $color }] + .')
        fi

        # Determine current keyboard layout from setxkbmap and format for display.
        layout=$(setxkbmap -query | awk '/layout:/ {print $2}' | cut -d',' -f1)
        [ -n "$layout" ] || layout="??"
        layout_display=$(printf '%s' "$layout" | tr '[:lower:]' '[:upper:]')
        with_layout=$(echo "$with_caps" | jq --arg layout "$layout_display" '[{ "full_text": $layout, "name": "keyboard_layout" }] + .')

        # Print the re-assembled line with the leading comma
        echo "$leading_comma$with_layout"
    done
)

# vim: ft=sh ts=4 sw=4 et
